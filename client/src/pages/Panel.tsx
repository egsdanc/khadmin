import { useEffect, useState } from "react";
import { useQuery, useQueryClient } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { TrendingUp, Users, CreditCard, Car, ClipboardCheck, DollarSign, Building2, Gauge, Loader2 } from "lucide-react";
import {
  BarChart,
  Bar,
  PieChart,
  Pie,
  LineChart as RechartsLineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  Cell,
  ResponsiveContainer
} from 'recharts';
import { format } from "date-fns";
import { tr } from 'date-fns/locale';
import { motion } from "framer-motion";
import { useAuth } from "@/hooks/use-auth";
import { useLanguage } from "@/contexts/LanguageContext";

// Ã–rnek veriler
const SAMPLE_DATA = {
  komisyonData: [
    { tarih: "01 Oca", komisyon: 1500 },
    { tarih: "02 Oca", komisyon: 2200 },
    { tarih: "03 Oca", komisyon: 1800 },
    { tarih: "04 Oca", komisyon: 2400 },
    { tarih: "05 Oca", komisyon: 2100 },
    { tarih: "06 Oca", komisyon: 2800 },
    { tarih: "07 Oca", komisyon: 3200 },
  ],
  firmaBayiData: [
    { name: "Firma A", value: 12 },
    { name: "Firma B", value: 8 },
    { name: "Firma C", value: 6 },
    { name: "Firma D", value: 4 },
  ],
  bakiyeData: [
    { name: "Bayi 1", bakiye: 15000 },
    { name: "Bayi 2", bakiye: 12000 },
    { name: "Bayi 3", bakiye: 9000 },
    { name: "Bayi 4", bakiye: 7500 },
    { name: "Bayi 5", bakiye: 6000 },
  ]
};

const COLORS = {
  primary: '#6366f1',
  secondary: '#ec4899',
  success: '#22c55e',
  warning: '#eab308',
  info: '#0ea5e9',
  purple: '#a855f7',
  orange: '#f97316',
  teal: '#14b8a6'
};

const chartColors = {
  'Garantili Arabam': '#ef4444', // kÄ±rmÄ±zÄ±
  'Dynobil': '#f97316', // turuncu
  'General': '#3b82f6', // mavi
  'Galeri': '#6b7280', // gri
  'Bireysel': '#818cf8' // varsayÄ±lan mor
};

const Panel = () => {
  const { t, language } = useLanguage();
  
  // Debug iÃ§in
  console.log('ðŸŽ¯ Panel component - Current language:', language);
  console.log('ðŸŽ¯ Panel component - Dashboard translation:', t('dashboard'));
  console.log('ðŸŽ¯ Panel component - useLanguage hook result:', { t, language });
  
  const container = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1
      }
    }
  };

  const item = {
    hidden: { opacity: 0, y: 20 },
    show: { opacity: 1, y: 0 }
  };

  // Add query for total commission
  const user = useAuth();
  const queryClient = useQueryClient();


  useEffect(() => {
    if (user) {
      // Invalidate all queries to force refresh when user changes
      queryClient.invalidateQueries();
    }
  }, [user, queryClient]);

  const { data: totalCommissionData } = useQuery({
    queryKey: ["/api/raporlar/total-commission", user?.role, user?.id], // Spesifik alanlarÄ± ekleyelim
    queryFn: async () => {
      const response = await fetch("/api/raporlar/total-commission", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(user), // TÃ¼m user nesnesini gÃ¶nderiyoruz
      });
  
      if (!response.ok) {
        throw new Error("Failed to fetch total commission");
      }
  
      return response.json();
    },
    enabled: !!user, // user nesnesi varsa sorguyu Ã§alÄ±ÅŸtÄ±r
  });
  
  
  // Add query for active companies count
  const { data: companiesData } = useQuery<{ success: boolean; data: { activeCount: number } }>({
    queryKey: ["/api/companies/stats"],
    queryFn: async () => {
      const response = await fetch("/api/companies/stats");
      if (!response.ok) {
        throw new Error("Failed to fetch company stats");
      }
      return response.json();
    }
  });

  const activeCompaniesCount = companiesData?.data?.activeCount || 0;

  // Add new query for active dealers count
  const { data: dealersData } = useQuery<{ success: boolean; data: { activeCount: number, formattedTotalBalance: string } }>({
    queryKey: ["/api/dealers/stats"],
    queryFn: async () => {
      const params = new URLSearchParams({
        user: JSON.stringify(user), // Send the entire user object
      });
      const response = await fetch(`/api/dealers/stats?${params.toString()}`);
      if (!response.ok) {
        throw new Error("Failed to fetch dealer stats");
      }
      return response.json();
    }
  });

  const activeDealersCount = dealersData?.data?.activeCount || 0;

  // Add query for companies distribution
  const { data: distributionData } = useQuery<{ success: boolean; data: Array<{ firma_name: string; bayi_count: number }> }>({
    queryKey: ["/api/companies/distribution"],
    queryFn: async () => {
      const response = await fetch("/api/companies/distribution");
      if (!response.ok) {
        throw new Error("Failed to fetch company distribution");
      }
      return response.json();
    }
  });

  const companyDistributionData = distributionData?.data?.map(item => ({
    name: item.firma_name,
    value: item.bayi_count
  })) || [];

  // Add new query for kilometre test count


  const { data: kilometreData } = useQuery<{ success: boolean; data: { totalTests: number } }>({
    queryKey: ["/api/kilometre/stats", user], // Cache iÃ§in Ã¶nemli
    queryFn: async () => {
      const params = new URLSearchParams({
        user: JSON.stringify(user), // TÃ¼m user nesnesini gÃ¶nderiyoruz
      });
  
      const response = await fetch(`/api/kilometre/stats?${params.toString()}`);
      if (!response.ok) {
        throw new Error("Failed to fetch kilometre stats");
      }
      return response.json();
    }
  });
  

  const totalKilometreTests = kilometreData?.data?.totalTests || 0;

  // Add query for VIN test count
  const { data: vinData } = useQuery<{ success: boolean; data: { totalTests: number } }>({
    queryKey: ["/api/vinreader/stats"],
    queryFn: async () => {

      const params = new URLSearchParams({
        user: JSON.stringify(user), // TÃ¼m user nesnesini gÃ¶nderiyoruz
      });
      console.log("vvvccc",user)
      const response = await fetch(`/api/vinreader/stats?${params.toString()}`);
      if (!response.ok) {
        throw new Error("Failed to fetch VIN stats");
      }
      return response.json();
    }
  });
  const totalVinTests = vinData?.data?.totalTests || 0;

  // Add query for top balance dealers
  const { data: topBalanceDealers = { success: false, data: [] } } = useQuery({
    queryKey: ['/api/bayiler/top-balance'],
    queryFn: async () => {
      const response = await fetch('/api/bayiler/top-balance');
      if (!response.ok) throw new Error('En yÃ¼ksek bakiyeli bayiler alÄ±namadÄ±');
      return response.json();
    }
  });

  // Add query for total test fees
  const { data: totalFeesData, isLoading: isLoadingFees } = useQuery<{
    success: boolean;
    data: {
      totalFees: number;
      formattedTotalFees: string;
    }
  }>({
    queryKey: ["/api/kilometre/total-fees"],
    queryFn: async () => {
      const params = new URLSearchParams({
        user: JSON.stringify(user), // Send the entire user object
      });
      const response = await fetch(`/api/kilometre/total-fees?${params.toString()}`);
      if (!response.ok) {
        throw new Error("Test Ã¼cretleri toplamÄ± alÄ±namadÄ±");
      }
      return response.json();
    }
  });

  const totalTestFees = totalFeesData?.data?.formattedTotalFees || "0,00 â‚º";

  const { data: satislarToplam } = useQuery<{
    success: boolean;
    data: { total: number; formattedTotal: string };
  }>({
    queryKey: ["/api/cihaz-satislari/toplam", user],
    queryFn: async () => {
      const params = new URLSearchParams({
        user: JSON.stringify(user), // Send the entire user object
      });
      
      const response = await fetch(`/api/cihaz-satislari/toplam?${params.toString()}`);
      
      if (!response.ok) {
        throw new Error("Failed to fetch total sales");
      }
      
      return response.json();
    },
  });

  // Update stats array with real data
  const allStats = [
    {
      title: t('total-commission'),
      value: totalCommissionData?.data?.formattedTotalCommission || "0,00 â‚º",
      icon: TrendingUp,
      description: "TÃ¼m zamanlar",
      color: COLORS.primary
    },
    {
      title: t('device-sales'),
      value: satislarToplam?.data?.formattedTotal || "0,00 â‚º",
      icon: DollarSign,
      description: "Toplam satÄ±ÅŸ tutarÄ±",
      color: COLORS.secondary
    },
    {
      title: t('total-km-test'),
      value: totalKilometreTests.toString(),
      icon: Gauge,
      description: "TÃ¼m zamanlar",
      color: COLORS.success
    },
    {
      title: t('active-dealers'),
      value: activeDealersCount.toString(),
      icon: Users,
      description: "Toplam bayi sayÄ±sÄ±",
      color: COLORS.warning
    },
    {
      title: t('total-balance'),
      value: dealersData?.data?.formattedTotalBalance || "0,00 â‚º",
      icon: CreditCard,
      description: user.user.role === "Bayi" ? "Bayi Bakiyesi" :"TÃ¼m bayilerin bakiyesi"  ,
      color: COLORS.info
    },
    {
      title: t('total-test-fee'),
      value: isLoadingFees ? "YÃ¼kleniyor..." : (totalFeesData?.data?.formattedTotalFees || "0,00 â‚º"),
      icon: ClipboardCheck,
      description: "Toplam test geliri",
      color: COLORS.purple
    },
    {
      title: t('active-companies'),
      value: activeCompaniesCount.toString(),
      icon: Building2,
      description: "Toplam firma sayÄ±sÄ±",
      color: COLORS.orange
    },
    {
      title: t('total-vin-test'),
      value: totalVinTests.toString(),
      icon: Car,
      description: "VIN test sayÄ±sÄ±",
      color: COLORS.teal
    }
  ];
  
  console.log( "ufffuu",user.user.role)
  const stats = allStats.filter(stat => {
    if (
      ["Cihaz SatÄ±ÅŸ ToplamÄ±", "Aktif Bayiler", "Aktif Firmalar", "Toplam Test Ãœcreti"].includes(stat.title) &&
      !["Admin", "Super Admin"].includes(user.user.role)
    ) {
      return false; // EÄŸer rol uygun deÄŸilse, bu elemanÄ± filtrele
    }
    return true;
  });

  return (
    <div className="min-h-screen p-4 sm:p-6 bg-gradient-to-br from-gray-50 to-white">
      <motion.div
        initial="hidden"
        animate="show"
        variants={container}
        className="max-w-6xl mx-auto space-y-6"
      >
        {/* Header */}
        <motion.div variants={item} className="space-y-2">
          <h1 className="text-4xl font-bold tracking-tight text-gray-900">
            {t('dashboard')}
          </h1>
          <p className="text-gray-500 text-lg">
            {t('dashboard-description')}
          </p>
        </motion.div>

        {/* Stats Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
          {stats.map((stat, index) => (
            <motion.div key={stat.title} variants={item}>
              <Card className="overflow-hidden bg-white border-gray-100 hover:border-gray-200 transition-all duration-300 hover:shadow-lg">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-600">{stat.title}</CardTitle>
                  <stat.icon className="h-4 w-4" style={{ color: stat.color }} />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold" style={{ color: stat.color }}>{stat.value}</div>
                  <p className="text-xs text-gray-500">{stat.description}</p>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        {/* Charts */}
        {user.user.role === "Admin" || user.user.role === "Super Admin" ? 
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-12">
          {/* Line Chart */}
          
          <motion.div variants={item} className="lg:col-span-6">
            <Card className="bg-white border-gray-100">
              <CardHeader className="pb-4">
                <CardTitle className="text-base font-medium text-gray-700">{t('commission-development')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <RechartsLineChart data={SAMPLE_DATA.komisyonData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>
                      <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                      <XAxis
                        dataKey="tarih"
                        stroke="#6b7280"
                        tick={{ fontSize: 12 }}
                      />
                      <YAxis
                        stroke="#6b7280"
                        tick={{ fontSize: 12 }}
                        tickFormatter={(value) => `${value} â‚º`}
                      />
                      <Tooltip
                        contentStyle={{
                          backgroundColor: '#ffffff',
                          border: '1px solid #e5e7eb',
                          borderRadius: '8px',
                          boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
                        }}
                        formatter={(value: number) => [`${value.toLocaleString('tr-TR')} â‚º`, 'Komisyon']}
                      />
                      <Legend />
                      <Line
                        type="monotone"
                        dataKey="komisyon"
                        name="Komisyon (â‚º)"
                        stroke={COLORS.primary}
                        strokeWidth={2}
                        dot={{ stroke: COLORS.primary, strokeWidth: 2 }}
                        activeDot={{ r: 8, stroke: COLORS.primary, strokeWidth: 2 }}
                      />
                    </RechartsLineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </motion.div>

          {/* Pie Chart */}
          <motion.div variants={item} className="lg:col-span-6">
            <Card className="bg-white border-gray-100">
              <CardHeader className="pb-4">
                <CardTitle className="text-base font-medium text-gray-700">{t('company-dealer-distribution')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full flex flex-col items-center justify-center">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={companyDistributionData}
                        dataKey="value"
                        nameKey="name"
                        cx="50%"
                        cy="50%"
                        outerRadius={90}
                      >
                        {companyDistributionData.map((entry) => (
                          <Cell
                            key={`cell-${entry.name}`}
                            fill={chartColors[entry.name as keyof typeof chartColors] || chartColors.Bireysel}
                          />
                        ))}
                      </Pie>
                      <Tooltip
                        contentStyle={{
                          backgroundColor: '#ffffff',
                          border: '1px solid #e5e7eb',
                          borderRadius: '8px',
                          boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
                        }}
                        formatter={(value: number, name: string) => [`${value} bayi`, name]}
                      />
                      <Legend
                        verticalAlign="bottom"
                        align="center"
                        layout="horizontal"
                        wrapperStyle={{
                          paddingTop: '5px',
                          width: '100%'
                        }}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        </div>
: ""}

        {/* Bar Chart */}
        <motion.div variants={item}>
        {user.user.role === "Admin" || user.user.role === "Super Admin" ? 

          <Card className="bg-white border-gray-100">
            <CardHeader className="pb-4">
              <CardTitle className="text-base font-medium text-gray-700">{t('highest-balance-dealers')}</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="h-[300px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <BarChart data={topBalanceDealers.data} margin={{ top: 10, right: 30, left: 0, bottom: 30 }}>
                    <CartesianGrid strokeDasharray="3 3" stroke="#e5e7eb" />
                    <XAxis
                      dataKey="name"
                      angle={-45}
                      textAnchor="end"
                      interval={0}
                      tick={{ fontSize: 12 }}
                      height={60}
                      stroke="#6b7280"
                    />
                    <YAxis
                      stroke="#6b7280"
                      tick={{ fontSize: 12 }}
                      tickFormatter={(value) => `${value.toLocaleString('tr-TR')} â‚º`}
                    />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: '#ffffff',
                        border: '1px solid #e5e7eb',
                        borderRadius: '8px',
                        boxShadow: '0 2px 4px rgba(0,0,0,0.05)'
                      }}
                      formatter={(value: number, name: string, props: any) => [
                        `${value.toLocaleString('tr-TR')} â‚º`,
                        `${props.payload.firma || 'Firma Yok'}`
                      ]}
                      labelFormatter={(label) => `Bayi: ${label}`}
                    />
                    <Bar
                      dataKey="value"
                      name="Bakiye (â‚º)"
                      fill={COLORS.primary}
                      radius={[4, 4, 0, 0]}
                    />
                  </BarChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>
                   : ""}
        </motion.div>
  
      </motion.div>
   
    </div>
  );
};

export default Panel;